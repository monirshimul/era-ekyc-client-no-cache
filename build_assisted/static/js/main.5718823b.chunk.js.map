{"version":3,"sources":["component/Page-Loader/era.png","reducers/loginReducer.js","actions/loginAction.js","reducers/rootReducer.js","store.js","component/Page-Loader/PageLoader.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initState","loginResponse","loginReducer","state","action","type","Object","assign","payload","rootReducer","combineReducers","login","LoginReducer","store","createStore","compose","applyMiddleware","thunk","PageLoader","className","src","eraLogo","width","height","style","marginTop","alt","Component","Login","lazy","Dashboard","ForgetPass","VerifyId","VerifyPassCode","VerifyLoginCode","App","handleTabClose","ev","sessionStorage","removeItem","preventDefault","returnValue","window","addEventListener","this","removeEventListener","fallback","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,iC,uPCErCC,EAAY,CACdC,cAAe,IAcJC,EAXM,WAAgC,IAA/BC,EAA8B,uDAAtBH,EAAWI,EAAW,uCAChD,OAAQA,EAAOC,MACX,ICNa,QDOT,OAAOC,OAAOC,OAAO,GAAIJ,EAAO,CAC5BF,cAAeG,EAAOI,UAE9B,QACI,OAAOL,IENJM,EAJKC,YAAgB,CAChCC,MAAOC,ICSIC,EATDC,YACVL,EACAM,YAEIC,YAAgBC,O,yBCYTC,E,uKAbP,OACI,yBAAKC,UAAU,cACX,yBAAKA,UAAU,cACX,8BACI,yBAAKC,IAAKC,IAASC,MAAM,QAAQC,OAAO,OAAOC,MAAO,CAAEC,UAAW,QAAUC,IAAI,Y,GANhFC,aCSnBC,EAAQC,gBAAK,kBAAM,+DAEnBC,EAAYD,gBAAK,kBAAM,qEACvBE,EAAaF,gBAAK,kBAAM,uDACxBG,EAAWH,gBAAK,kBAAM,uDACtBI,EAAiBJ,gBAAK,kBAAM,uDAC5BK,EAAkBL,gBAAK,kBAAM,wDAuEpBM,E,4MA9DbC,eAAiB,SAACC,GAChBC,eAAeC,WAAW,aAC1BF,EAAGG,iBACHH,EAAGI,YAAc,I,kEAKjBC,OAAOC,iBAAiB,eAAgBC,KAAKR,kB,6CAI7CM,OAAOG,oBAAoB,eAAgBD,KAAKR,kB,+BAIhD,OACE,kBAAC,IAAD,CAAUvB,MAAOA,GAGf,kBAAC,IAAD,KAEE,kBAAC,WAAD,CAAUiC,SAAU,kBAAC,EAAD,OAClB,yBAAK3B,UAAU,OAEb,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAO4B,OAAK,EAACC,KAAK,IAAIC,UAAWrB,IACjC,kBAAC,IAAD,CAAOmB,OAAK,EAACC,KAAK,eAAeC,UAAWlB,IAC5C,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,aAAaC,UAAWjB,IAC1C,kBAAC,IAAD,CAAOgB,KAAK,aAAaC,UAAWnB,IACpC,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,oBAAoBC,UAAWhB,IACjD,kBAAC,IAAD,CAAOe,KAAK,gBAAgBC,UAAWf,KAWzC,kBAAC,wBAAD,c,GA7CIP,aCfEuB,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5718823b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/era.e59fd98b.png\";","import { LOGIN } from '../actions/loginAction';\r\n\r\nconst initState = {\r\n    loginResponse: {}\r\n}\r\n\r\nconst loginReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case LOGIN:\r\n            return Object.assign({}, state, {\r\n                loginResponse: action.payload\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default loginReducer;","\r\n\r\nexport const LOGIN = \"LOGIN\";\r\n\r\nexport const loginSuccess = (d) => {\r\n    return {\r\n        type: LOGIN,\r\n        payload: d\r\n    }\r\n}\r\n\r\nexport const loginRequest = (data) => {\r\n    return (dispatch) => {\r\n        try {\r\n\r\n            dispatch(loginSuccess(data));\r\n        }\r\n        catch (ex) {\r\n            dispatch(loginSuccess(ex));\r\n        }\r\n\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport LoginReducer from \"./loginReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    login: LoginReducer\r\n})\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/rootReducer';\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    compose(\r\n        // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n        applyMiddleware(thunk)\r\n    )\r\n\r\n);\r\n\r\nexport default store;","import React, { Component } from 'react'\r\nimport './PageLoader.css';\r\nimport eraLogo from './era.png';\r\n\r\n\r\nclass PageLoader extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"loaderBody\">\r\n                <div className=\"pageLoader\">\r\n                    <span>\r\n                        <img src={eraLogo} width=\"150px\" height=\"50px\" style={{ marginTop: \"70px\" }} alt=\"\" />\r\n                    </span>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default PageLoader\r\n","import React, { Component, Suspense, lazy } from 'react';\r\n\r\n\r\nimport { BrowserRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport 'react-notifications/lib/notifications.css';\r\nimport { NotificationContainer } from 'react-notifications';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n//import VerifyLoginCode from './component/Login/code/VerifyLoginCode';\r\n\r\n\r\n\r\nimport PageLoader from './component/Page-Loader/PageLoader'\r\n//import Login from './component/Login/Login';\r\nconst Login = lazy(() => import('./component/Login/Login'));\r\n//import Dashboard from './component/Dashboard/Dashboard';\r\nconst Dashboard = lazy(() => import('./component/Dashboard/Dashboard'));\r\nconst ForgetPass = lazy(() => import('./component/E-KYC/User/Password/ForgetPass'));\r\nconst VerifyId = lazy(() => import('./component/E-KYC/User/Password/VerifyId'));\r\nconst VerifyPassCode = lazy(() => import('./component/E-KYC/User/Password/VerifyPassCode'));\r\nconst VerifyLoginCode = lazy(() => import('./component/Login/code/VerifyLoginCode'));\r\n\r\n// import VerifyId from './component/E-KYC/User/Password/VerifyId';\r\n// import VerifyPassCode from './component/E-KYC/User/Password/VerifyPassCode';\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n  handleTabClose = (ev) => {\r\n    sessionStorage.removeItem('accountId');\r\n    ev.preventDefault();\r\n    ev.returnValue = '';\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('beforeunload', this.handleTabClose);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('beforeunload', this.handleTabClose);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n\r\n\r\n        <Router >\r\n\r\n          <Suspense fallback={<PageLoader />}>\r\n            <div className=\"App\">\r\n\r\n              <Switch>\r\n\r\n                <Route exact path=\"/\" component={Login} />\r\n                <Route exact path=\"/forget-pass\" component={ForgetPass} />\r\n                <Route exact path=\"/verify-id\" component={VerifyId} />\r\n                <Route path=\"/dashboard\" component={Dashboard} />\r\n                <Route exact path=\"/verify-pass-code\" component={VerifyPassCode} />\r\n                <Route path=\"/verify-login\" component={VerifyLoginCode} />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n              </Switch>\r\n              <NotificationContainer />\r\n\r\n\r\n            </div >\r\n          </Suspense>\r\n        </Router >\r\n\r\n\r\n\r\n\r\n      </Provider>\r\n\r\n\r\n\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// import '../node_modules/bootstrap/dist/css/bootstrap.min.css'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}